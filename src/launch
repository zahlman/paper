#!/usr/bin/env python
# coding: utf-8
import importlib, sys
from os.path import abspath as absolute, dirname as parent, join as joinpath


def relative_to_here(*parts):
    return joinpath(absolute(parent(__file__)), *parts)


def check_python():
    my_executable = relative_to_here('python')
    if my_executable != absolute(sys.executable):
        import subprocess
        result = subprocess.call([my_executable, *sys.argv])
        sys.exit(result)


def read_entry_points():
    import configparser
    p = configparser.ConfigParser()
    with open(relative_to_here('..', 'entry_points.txt')) as f:
        p.read_file(f)
    return dict(p)


def parse_entry_point(eps, epname):
    module, colon, func = eps['console_scripts'][epname].partition(':')
    if colon and not func:
        raise ValueError("function name may not be empty when provided")
    return (module, func)


def invoke_entry_point(module, func):
    module = importlib.import_module(module)
    if func:
        getattr(module, func)()


def main():
    check_python()
    progname, epname, *sys.argv = sys.argv
    invoke_entry_point(*parse_entry_point(read_entry_points(), epname))


if __name__ == '__main__':
    main()
